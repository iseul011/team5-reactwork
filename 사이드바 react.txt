// src/App.js
import React, { useEffect, useState } from 'react';
import './App.css';
import MainPanel from './components/mainPanel/MainPanel';
import { BrowserRouter as Router, Route, Routes, useNavigate } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';
import Login from './components/login/Login.jsx';
import SignUpPage from './components/SignUpPage/SignUpPage.jsx';

function App() {
  const navigate = useNavigate();

  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [hostId, setHostId] = useState(localStorage.getItem('id') || '');
  const [showContinuePrompt, setShowContinuePrompt] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem('token');
    const id = localStorage.getItem('id');
    
    if (token && id) {
      setShowContinuePrompt(true); // 로그인된 정보가 있으면 계속할지 물어보는 창 띄우기
    }
  }, []);

  const handleContinue = () => {
    setIsLoggedIn(true);
    setHostId(localStorage.getItem('id'));
    setShowContinuePrompt(false);
    navigate(`/home/${localStorage.getItem('id')}`);
  };

  const handleCancel = () => {
    setIsLoggedIn(false);
    setShowContinuePrompt(false);
    localStorage.clear(); // 로컬 스토리지 비우기
  };

  const handleLogin = () => {
    setIsLoggedIn(true);
    setHostId(localStorage.getItem('id'));
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
    localStorage.clear();
    navigate('/'); // 로그아웃 후 로그인 페이지로 이동
  };

  return (
    <div className="App">
      {showContinuePrompt ? (
        <div className="continue-prompt">
          <p>{localStorage.getItem('id')}님으로 계속 실행하시겠습니까?</p>
          <button onClick={handleContinue}>계속 진행</button>
          <button onClick={handleCancel}>취소</button>
        </div>
      ) : isLoggedIn ? (
        <MainPanel onLogout={handleLogout} hostId={hostId} setHostId={setHostId} />
      ) : (
        <Routes>
          <Route path="/" element={<Login onLoginSuccess={handleLogin} />} />
          <Route path="/SignUpPage" element={<SignUpPage />} />
        </Routes>
      )}
    </div>
  );
}

export default App;



import React, { useEffect, useState } from 'react';
import { useNavigate, Routes, Route, Link, useParams } from 'react-router-dom';
import Home from '../home/Home';
import Board from '../board/Board';
import './Sidebar.css'; // 개별 스타일 적용
import Diary from '../diary/Diary';
import InputDiary from '../diary/InputDiary';
import GetDiary from '../diary/GetDiary';
import BoardUpload from '../board/BoardUpload';
import BoardDetail from '../board/BoardDetail';
import GuestbookPage from '../guestbookpage/GuestbookPage';
import BulletinBoardPage from '../BulletinBoardPage/BulletinBoardPage'; 
import WriteMessage from '../message/WriteMessage';
import Inbox from '../message/Inbox';
import MessageDetail from '../message/MessageDetail';


function Sidebar() {
  const navigate = useNavigate();
  const { paramHostId } = useParams(); // URL 파라미터에서 hostId 가져오기
  const myId = localStorage.getItem('id'); // 로컬 스토리지에서 내 아이디 가져오기
  
  // useState를 사용하여 상태 관리
  const [hostId, setHostId] = useState(paramHostId);
  useEffect(() => {
    setHostId(paramHostId); // URL 파라미터가 변경될 때 hostId 업데이트
    console.log("host아이디 사이드바 : ", paramHostId);
  }, [paramHostId]);
  const goToMyHomePage = () => {
    setHostId(myId); // 내 아이디로 hostId 설정
    navigate(`/home/${myId}`); // 내 홈페이지로 이동
  };

  console.log('hostId:', hostId);
  console.log('myId:', myId);

  return (
    <div style={{ display: 'flex' }}>
      <nav className="sidebar">
      {hostId !== myId && (
          <button onClick={goToMyHomePage} className="btn btn-primary">내 홈페이지로 돌아가기</button>
        )}
        <Link to={`/home/${hostId}`}><div className="icon home"></div></Link>
        <Link to={`/diary/${hostId}`}><div className="icon diary"></div></Link>
        <Link to={`/board/${hostId}`}><div className="icon board"></div></Link>
        <Link to={`/GuestbookPage/${hostId}`}><div className="icon visit"></div></Link>
        <div className="icon walk"><a href="#"></a></div>
        <div className="icon food"><a href="#"></a></div>
      </nav>

      <div className="center-panel">

        <Routes>
          
          {/* 메인탭 경로 */}
          <Route path="/home/:hostId" element={<Home hostId={hostId} setHostId={setHostId}/>} />
          <Route path="/diary/:hostId" element={<Diary />} />
          <Route path="/board/:hostId" element={<Board />} />

          {/* 기타 경로 처리 */}
          <Route path="/boardUpload/:hostId" element={<BoardUpload />} />
          <Route path="/boardDetail/:bNum/:hostId" element={<BoardDetail />} />
          <Route path="/inputDiary/:date/:hostId" element={<InputDiary />} />
          <Route path="/getDiary/:dNum/:hostId" element={<GetDiary />} />
          <Route path="/GuestbookPage/:hostId" element={<GuestbookPage />} />
          <Route path="/write/:hostId" element={<WriteMessage />} />
          <Route path="/inbox/:hostId" element={<Inbox />} />
          <Route path="/message/:mNum/:hostId" element={<MessageDetail />} />
          <Route path="/bulletin-board/:hostId" element={<BulletinBoardPage />} /> 
        </Routes>
      </div>
    </div>
  );
}

export default Sidebar;
